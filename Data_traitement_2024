import pandas as pd

def clean_csv(file_path='data2024.csv', output_path='data2024_nettoye.csv'):
    # Charger les données sans header initial et détecter les séparateurs
    try:
        df = pd.read_csv(file_path, sep='[;,	]', engine='python', header=None, quotechar='"', on_bad_lines='skip')
    except pd.errors.ParserError as e:
        print(f"Erreur de parsing : {e}")
        return
    
    # Afficher un aperçu des premières lignes pour debug
    print("Aperçu des premières lignes du fichier chargé:")
    print(df.head())

    # Identifier le nombre réel de colonnes
    num_cols = df.shape[1]
    print(f"Nombre de colonnes détectées: {num_cols}")

    # Vérification du nombre de colonnes attendues (au moins 4 colonnes)
    if num_cols < 4:
        print("Erreur: Le fichier CSV ne contient pas assez de colonnes valides.")
        print("Colonnes détectées:", df.columns)
        return
    
    # Ajouter la colonne 'Jour' dynamiquement
    df['Jour'] = df.iloc[:, 0].where(df.iloc[:, 0].astype(str).str.contains("Journée"), None)
    df['Jour'] = df['Jour'].str.extract(r'(\d{2}/\d{2}/\d{4})')  # Extraire uniquement la date
    df['Jour'] = df['Jour'].ffill()

    # Supprimer les lignes contenant "Journée" (elles sont maintenant dans la colonne 'Jour')
    df = df[~df.iloc[:, 0].astype(str).str.contains("Journée")]

    # Définition des noms de colonnes (en fonction du nombre réel détecté)
    expected_cols = ['Heures', 'PrévisionJ-1', 'PrévisionJ', 'Consommation', 'Jour']
    df.columns = expected_cols[:num_cols] + (['Jour'] if num_cols == 4 else [])

    # Supprimer les lignes avec des valeurs nulles ou vides
    df = df.dropna()

    # Convertir les colonnes numériques en nombres
    df.iloc[:, 1:4] = df.iloc[:, 1:4].apply(pd.to_numeric, errors='coerce')

    # Supprimer les valeurs aberrantes (plage arbitraire entre 10 000 et 100 000)
    df = df[(df.iloc[:, 3] >= 10000) & (df.iloc[:, 3] <= 100000)]

    # Réorganiser les colonnes
    df = df[['Jour'] + list(df.columns[:-1])]

    # Sauvegarder le fichier nettoyé
    df.to_csv(output_path, index=False, sep=';')

    print("Fichier nettoyé et sauvegardé sous", output_path)
    
    return df

if __name__ == "__main__":
    clean_csv()

import pandas as pd

def clean_csv(file_path='data2024.csv', output_path='data2024_nettoye.csv'):
    # Charger les données en spécifiant un délimiteur flexible et en gérant les guillemets
    try:
        df = pd.read_csv(file_path, sep='[;,	]', engine='python', header=None, quotechar='"', on_bad_lines='skip')
    except pd.errors.ParserError as e:
        print(f"Erreur de parsing : {e}")
        return
    
    # Afficher les 5 premières lignes pour debug
    print("Aperçu des premières lignes du fichier chargé:")
    print(df.head())
    
    # Identifier le nombre réel de colonnes
    num_cols = df.shape[1]
    print(f"Nombre de colonnes détectées: {num_cols}")
    
    # Vérification du nombre de colonnes avant de procéder
    if num_cols == 4:
        df.columns = ['Heures', 'PrévisionJ-1', 'PrévisionJ', 'Consommation']
    elif num_cols == 5:
        df.columns = ['Heures', 'PrévisionJ-1', 'PrévisionJ', 'Consommation', 'Jour']
    else:
        print(f"Erreur: Nombre de colonnes inattendu ({num_cols}) dans le fichier.")
        return
    
    # Ajouter la colonne 'Jour' dynamiquement
    df['Jour'] = df['Heures'].where(df['Heures'].astype(str).str.contains("Journée"), None)
    df['Jour'] = df['Jour'].str.extract(r'(\d{2}/\d{2}/\d{4})')  # Extraire uniquement la date
    df['Jour'] = df['Jour'].ffill()
    
    # Supprimer les lignes contenant "Journée" (elles sont maintenant dans la colonne 'Jour')
    df = df[~df['Heures'].astype(str).str.contains("Journée")]
    
    # Supprimer les lignes avec des valeurs nulles ou vides
    df = df.dropna()
    
    # Convertir les colonnes numériques en entiers
    df[['PrévisionJ-1', 'PrévisionJ', 'Consommation']] = df[['PrévisionJ-1', 'PrévisionJ', 'Consommation']].apply(pd.to_numeric, errors='coerce')
    
    # Supprimer les valeurs aberrantes (en supposant que les valeurs normales sont entre 10 000 et 100 000)
    df = df[(df['Consommation'] >= 10000) & (df['Consommation'] <= 100000)]
    
    # Réorganiser les colonnes (optionnel)
    df = df[['Jour', 'Heures', 'PrévisionJ-1', 'PrévisionJ', 'Consommation']]
    
    # Sauvegarder le fichier nettoyé
    df.to_csv(output_path, index=False, sep=';')
    
    print("Fichier nettoyé et sauvegardé sous", output_path)
    
    return df

def merge_cleaned_files(files):
    # Fusionner plusieurs fichiers nettoyés
    merged_df = pd.DataFrame()
    for file in files:
        try:
            print(f"Traitement du fichier: {file}")
            cleaned_data = clean_csv(file_path=file, output_path=None)
            if cleaned_data is not None:
                merged_df = pd.concat([merged_df, cleaned_data], ignore_index=True)
        except Exception as e:
            print(f"Erreur lors de la fusion du fichier {file}: {e}")
    
    if not merged_df.empty:
        merged_df.to_csv('data_merged.csv', index=False, sep=';')
        print("Les fichiers ont été fusionnés et sauvegardés sous 'data_merged.csv'")
    else:
        print("Aucun fichier valide pour la fusion.")

if __name__ == "__main__":
    files = ['data_2023.csv', 'data_2024.csv', 'data_2025.csv']
    merge_cleaned_files(files)
